#!/bin/bash

# Define color-coded messages for output formatting
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"  # Log file for package installations
USER="$(whoami)"
set -e  # Exit on error
sudo pacman -Syu --needed --noconfirm base-devel
clear

# Check if yay is already installed
if command -v yay >/dev/null 2>&1; then
    echo -e "yay was located, moving on.\n"
    yay -Suy --noconfirm
else
    # no package found so installing
    echo -en "$CNT - Now installing $1 ."
    echo "Updating system and installing prerequisites..."

    echo "Cloning yay repository..."
    git clone https://aur.archlinux.org/yay.git /tmp/yay
    cd /tmp/yay

    echo "Building and installing yay..."
    makepkg -si --noconfirm

    echo "Checking yay installation..."
    if command -v yay &>/dev/null; then
        echo "yay installed successfully!"
    else
        echo "Installation failed!" >&2
        exit 1
    fi

    echo "Creating a package of yay..."
    makepkg -cf

    echo "Moving package to ~/yay..."
    mkdir -p ~/yay
    mv *.pkg.tar.zst ~/yay/

    echo "Done! The packaged yay can be found in '~/yay'."
fi

clear
mkdir -p ~/.config
cp -R ~/hypr/* ~/.config/

# Update system
sudo pacman -Syu --noconfirm

# Install essential dependencies
sudo pacman -S --needed --noconfirm \
    ly layer-shell-qt5 qt5-declarative \
    libva xorg-xinit xorg-server mesa pulseaudio nano flatpak \

yay -S --noconfirm hyprland kitty waybar \
    swaylock-effects wofi wlogout mako thunar \
    ttf-jetbrains-mono-nerd noto-fonts-emoji \
    polkit-gnome python-requests starship \
    swappy grim slurp pamixer brightnessctl gvfs \
    bluez bluez-utils lxappearance xfce4-settings \
    nwg-look qogir-icon-theme materia-gtk-theme illogical-impulse-bibata-modern-classic-bin xdg-desktop-portal-hyprland \
    zen obsidian \
    reflector rsync python-pywal16 swww swaync myfetch neovim python-pywalfox hypridle hyprpicker hyprshot hyprlock pyprland fd cava brightnessctl clock-rs-git nwg-look qogir-icon-theme materia-gtk-theme illogical-impulse-bibata-modern-classic-bin thunar gvfs eza bottom htop libreoffice-fresh ncspot blueman bluez pipewire pipewire-pulse pipewire-alsa pipewire-jack pavucontrol pulsemixer gnome-network-displays gst-plugins-bad

# Enable Bluetooth services
sudo systemctl enable --now bluetooth.service

clear

echo "Setting wallpaper"
wal -i ~/Dotfiles/wallpapers/pywallpaper.jpg -n

# Ask user to specify CPU brand and install the appropriate microcode
read -n1 -rep 'What is your CPU brand? (AMD: "a", Intel: "i", ARM: "r"): ' CPU
case "$CPU" in
    a|A) 
        echo -e "Installing AMD CPU microcode.\n"
        sudo pacman -S --noconfirm amd-ucode
        ;;
    i|I) 
        echo -e "Installing Intel CPU microcode.\n"
        sudo pacman -S --noconfirm intel-ucode
        ;;
    r|R) 
        echo -e "Installing ARM CPU support packages.\n"
        sudo pacman -S --noconfirm linux-aarch64 linux-aarch64-headers uboot-tools
        ;;
    *) 
        echo -e "Invalid option. Skipping microcode installation.\n"
        ;;
esac

clear

# Ask user to specify GPU brand and install the corresponding drivers
read -n1 -rep 'What is your GPU brand? (AMD: "a", Intel: "i", NVIDIA: "n", ARM: "r"): ' GPU
case "$GPU" in
    a|A) echo -e "Installing AMD GPU drivers.\n" && sudo pacman -S --noconfirm vulkan-radeon xorg-xf86-video-amdgpu ;;
    i|I) echo -e "Installing Intel GPU drivers.\n" && sudo pacman -S --noconfirm intel-media-driver libva-intel-driver intel-vulkan ;;
    n|N) 
        echo -e "Installing NVIDIA GPU drivers.\n" && sudo pacman -S --noconfirm nvidia nvidia-utils nvidia-settings libva-nvidia-driver-git
        flatpak run io.github.hmlendea.geforcenow-electron
        ;;
    r|R) 
        echo -e "Installing ARM GPU support packages.\n"
        sudo pacman -S --noconfirm mali-opencl xf86-video-fbdev
        ;;
    *) 
        echo -e "Invalid option. Skipping microcode installation.\n"
        ;;
esac

clear

# Install and configure the Starship shell (optional)
read -n1 -rep 'Would you like to install the Starship shell? (y/n) ' STAR
if [[ $STAR == "Y" || $STAR == "y" ]]; then
    echo 'eval "$(starship init bash)"' >> ~/.bashrc
    cp starship.toml ~/.config/
fi

clear

sudo systemctl enable sddm

clear

# Print final message and reboot
echo -e "$CAT - Setup complete. Rebooting in...\n"
for i in {3..1}; do
    echo -e "$i"
    echo -ne "\r"
    sleep 0.2
    for j in {1..4}; do
        echo -n "."
        sleep 0.2
    done
    echo -ne "\r"
done
sudo reboot
